@attribute [Route(C.NAV.Define.Users)]
@inject DB db
@inject Radzen.NotificationService NTF
@inject DialogService DLG
@inject NavigationManager NAV

<h1>Kullanıcılar</h1>
<RadzenDataGrid @ref="grid" Count="@(nonFilteredTotalCount)" Data="@data"
                TItem="DBUser"
                LoadData="@LoadData"
                AllowSorting="true"
                AllowFiltering="true"
                AllowColumnPicking="false"
                AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Center"
                PageSizeOptions="new int[]{10,20,50,100,500}"
                PagerPosition="PagerPosition.TopAndBottom"
                PageSize="10"
                EditMode="DataGridEditMode.Single"
                ShowPagingSummary="true">
    <HeaderTemplate>
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle" Text="Yeni Kullanıcı Tanımı" Click="@InsertRow" Disabled="isInEditOrInsertMode" />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="DBModels.DBUser" Property="Id" Title="Id" Pickable="false" Width="100px" Filterable="false" />
        <RadzenDataGridColumn TItem="DBModels.DBUser" Property="UserName" Title="Kullanıcı Adı" Pickable="false" Filterable="true">
            <EditTemplate>
                <RadzenTextBox @bind-Value="@(context.UserName)" Name="UserName" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DBModels.DBUser" Property="FullName" Title="İsim" Pickable="false" Filterable="true">
            <EditTemplate>
                <RadzenTextBox @bind-Value="@(context.FullName)" Name="FullName" Style="width: 100%;" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="DBModels.DBUser" Property="UserType" Title="Tür" Pickable="false">
@*             <FilterValueTemplate>

            </FilterValueTemplate> *@
            <Template>
                @C.GetEnumDisplayName(context.UserType)
            </Template>
            <EditTemplate>
                <RadzenDropDown @bind-Value="context.UserType"
                                Data="@Enum.GetValues(typeof(UserType))"
                                Style="width:100%; display: block;">
                    <Template Context="s">
                        @C.GetEnumDisplayName(s)
                    </Template>
                </RadzenDropDown>
            </EditTemplate>

        </RadzenDataGridColumn>



        <RadzenDataGridColumn Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template>
                @* <RadzenButton Icon="add_circle" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" Click="@(() => InsertAfterRow(order))" title="Add new row after this row" Disabled="@(editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)" /> *@
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@(args => EditRow(context))" @onclick:stopPropagation="true" />
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => DeleteRow(context))" @onclick:stopPropagation="true" />
                <RadzenButton Icon="settings" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium" Shade="Shade.Lighter" class="rz-my-1 rz-ms-1" Click="@(args => NAV.NavigateTo(C.NAV.Define.UserActions + context.Id))" @onclick:stopPropagation="true" />
            </Template>
            <EditTemplate>
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(context))" aria-label="Save" />
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="rz-my-1 rz-ms-1" Click="@((args) => CancelEdit(context))" aria-label="Cancel" />
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
@code {
    private List<DBUser>? data;
    private RadzenDataGrid<DBUser>? grid;
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            grid?.LocalizeGrid();
        }
    }
    private int nonFilteredTotalCount;
    private bool isInEditOrInsertMode = false;

    // protected override void OnInitialized()
    // {
    //     data = Enumerable.Empty<DBModels.DBUser>().ToList(); // Initialize with an empty list to avoid InsertRow is not working issue
    // }
    // protected override async Task OnInitializedAsync()
    // {
    //     await base.OnInitializedAsync();
    //     data = Enumerable.Empty<DBModels.DBUser>().ToList(); // Initialize with an empty list to avoid InsertRow is not working issue

    // }

    private async Task LoadData(LoadDataArgs args)
    {
        var resultData = db.Users.LoadData(args);
        if (resultData.Success)
        {
            nonFilteredTotalCount = resultData.TotalCount;
            this.data = resultData.Data;
        }
        else
        {
            if (resultData.Messages?.Any() == true)
            {
                var m = string.Join(Environment.NewLine, resultData.Messages);
                NTF.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = m,
                        Duration = 5000
                    });
            }
            else
            {
                NTF.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = "Unknown error",
                        Duration = 5000
                    });
            }
        }

        await Task.CompletedTask;
    }
    async Task InsertRow()
    {
        if (grid?.IsValid != true) return;
        var itemToInsertOrEdit = new DBUser();
        if (nonFilteredTotalCount <= 0) nonFilteredTotalCount = 1; // Set the total count to 1 to avoid the "InsertRow is not working" issue
        await grid!.InsertRow(itemToInsertOrEdit);
        isInEditOrInsertMode = true;
    }



    void EditRow(DBUser order)
    {
        // ordersToInsert.Add(order);
        isInEditOrInsertMode = true;
        grid!.EditRow(order);
    }
    async void DeleteRow(DBUser item)
    {
        if (item == null) return;

        var r = await DLG.Confirm($"Bu kullanıcı ({item.FullName}) ve kullanıcıya ait başarım kayıtları silinecektir", "Silme işlemini onayla", new ConfirmOptions() { OkButtonText = "Evet", CancelButtonText = "Hayır" });
        if (r == true)
        {
            var dr = db.DeleteUser(item.Id);
            if (dr.Success)
            {
                NTF.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Kullanıcılar",
                        Detail = "Kullanıcı başarıyla silindi.",
                        Duration = 5000
                    });
            }
            else
            {
                foreach (var err in dr.Messages)
                {
                    NTF.Notify(new NotificationMessage()
                        {
                            Severity = NotificationSeverity.Error,
                            Summary = "Error",
                            Detail = err,
                            Duration = 5000
                        });
                }
            }
            await grid!.Reload();
        }
    }
    void CancelEdit(DBUser item)
    {
        grid!.CancelEditRow(item);
        isInEditOrInsertMode = false;
    }
    void SaveRow(DBUser item)
    {
        if (item == null) return;
        // grid!.UpdateRow(item);

        var r = item.Id > 0 ? db.UpdateUser(item) : db.AddUser(item);
        if (r.Success)
        {
            NTF.Notify(new NotificationMessage()
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Kullanıcılar",
                    Detail = $"Kullanıcı başarıyla {(item.Id > 0 ? "güncellendi" : "eklendi")}.",
                    Duration = 5000
                });
            grid!.CancelEditRow(item);
            isInEditOrInsertMode = false;
            grid!.Reload();
        }
        else
        {
            foreach (var err in r.Messages)
            {
                NTF.Notify(new NotificationMessage()
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "Error",
                        Detail = err,
                        Duration = 5000
                    });
            }
        }
    }

}
