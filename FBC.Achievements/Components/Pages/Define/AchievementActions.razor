@attribute [Route(C.NAV.Define.AchievementActions + "{Id:int}")]
@attribute [Authorize(Roles = C.User.AdminOrMentorRole)]
@inject DB db
@inject Radzen.NotificationService NTF
@inject DialogService DLG
@inject NavigationManager NavigationManager
@inject IStringLocalizer L

<h3>Başarım İşlemleri</h3>
@if (Achievement == null)
{
    <p>Başarım yükleniyor...</p>
}
else
{

    <RadzenCard>
        <RadzenStack Orientation="Orientation.Vertical">
            <label><strong>@C.L.Achievement.Title(L):</strong> @Achievement.Title</label>
            <label><strong>@C.L.Achievement.Description(L):</strong> @Achievement.Description</label>
            <label><strong>@C.L.Achievement.Goal(L):</strong> @Achievement.Goal</label>
            <AssignTheAchievementToAllUsers Achievement="Achievement" ShowAchievementDetails="false" OnNewUsersAssigned="() => aul?.Refresh()" />
        </RadzenStack>
    </RadzenCard>
    <RadzenCard>
        <AchievementUserList @ref="aul" AchievementId="Id" />
    </RadzenCard>

}
@code {
    [Parameter]
    public int Id { get; set; }

    private DBAchievement? Achievement { get; set; } = new DBAchievement();
    private AchievementUserList? aul { get; set; }
    // [Parameter]
    // [SupplyParameterFromQuery(Name = C.NAV.Params.Redirect)]
    // public string? Redirect { get; set; }
    //Loaad the achievement from the database
    protected override async Task OnInitializedAsync()
    {
        Achievement = await db.Achievements.AsNoTracking().FirstOrDefaultAsync(x => x.Id == Id);
        if (Achievement == null)
        {
            NTF.Notify(new NotificationMessage() { Severity = NotificationSeverity.Error, Summary = C.L.Achievement.ErrorNotFound(L), Duration = 5000 });
            NavigationManager.NavigateTo(C.NAV.Define.Achievements);
        }
    }
}
